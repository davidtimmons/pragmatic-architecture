import { TFailure as TDatabaseFailure } from "../../database";
import { TFailure as TFeeFailure } from "../../services/fee";
import { TFailure as TUserFailure } from "../../services/user";
import { TFailure as TWidgetFailure } from "../../services/widget";
import { TFailure as TTransactionFailure } from "../../services/transaction";
import { TFailure as TPurchaseWidgetFailure } from "../../workflows/purchase-widget";

/// TYPES ///

type TFailure =
  | TDatabaseFailure
  | TFeeFailure
  | TUserFailure
  | TWidgetFailure
  | TTransactionFailure
  | TPurchaseWidgetFailure;

type TPublicApiResponse = {
  error: {
    status: number;
    message: string;
  };
};

/// LOGIC ///

/**
 * Create a public response object for API requests that resulted in an application failure.
 *
 * @param failure - Private failure object generated by the application
 */
function main(failure: TFailure): TPublicApiResponse {
  console.error(failure);

  switch (failure.type) {
    // Database
    case "FAILED_TO_OPEN_DATABASE":
    case "FAILED_TO_CLOSE_DATABASE":
    case "FAILED_TO_RETRIEVE_RECORDS":
    case "FAILED_TO_RUN_SQL":
      return {
        error: {
          status: 500,
          message: "Could not complete this request",
        },
      };
      break;

    // Services
    case "FAILED_TO_RETRIEVE_MARKETPLACE_FEE":
    case "FAILED_TO_CREATE_USER":
    case "FAILED_TO_RETRIEVE_USER":
    case "FAILED_TO_SET_ACCOUNT_BALANCE":
    case "FAILED_TO_CREATE_WIDGET":
    case "FAILED_TO_RETRIEVE_WIDGET":
    case "FAILED_TO_SET_PURCHASED_STATUS":
    case "FAILED_TO_CREATE_TRANSACTION":
      return {
        error: {
          status: 500,
          message: "Could not complete this request",
        },
      };
      break;

    // Service: User
    case "INCORRECT_ACCOUNT_BALANCE":
      return {
        error: {
          status: 409,
          message: "New account balance is invalid",
        },
      };
      break;

    // Workflow: Purchase Widget
    case "WIDGET_IS_UNAVAILABLE":
      return {
        error: {
          status: 409,
          message: "This widget has already been purchased",
        },
      };
      break;

    case "INSUFFICIENT_FUNDS":
      return {
        error: {
          status: 409,
          message: "Buyer has insufficient funds to complete this transaction",
        },
      };
      break;

    case "BUYER_OWNS_WIDGET":
      return {
        error: {
          status: 409,
          message: "Buyer already owns widget",
        },
      };
      break;

    // Default
    default:
      return {
        error: {
          status: 500,
          message: "Could not complete this request",
        },
      };
      break;
  }
}

export type { TFailure };
export default { main };
